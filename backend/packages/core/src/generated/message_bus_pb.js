// source: message_bus.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.DoubleFourDecimals', null, global);
goog.exportSymbol('proto.DoubleTwoDecimals', null, global);
goog.exportSymbol('proto.GameCreated', null, global);
goog.exportSymbol('proto.InfoRequest', null, global);
goog.exportSymbol('proto.InfoResponse', null, global);
goog.exportSymbol('proto.LevelInfo', null, global);
goog.exportSymbol('proto.PackedArena', null, global);
goog.exportSymbol('proto.PackedBombModel', null, global);
goog.exportSymbol('proto.PackedBulletModel', null, global);
goog.exportSymbol('proto.PackedClientPickedUpUpdate', null, global);
goog.exportSymbol('proto.PackedClientPlayerUpdate', null, global);
goog.exportSymbol('proto.PackedClientSpawnedBombUpdate', null, global);
goog.exportSymbol('proto.PackedClientSpawnedBulletUpdate', null, global);
goog.exportSymbol('proto.PackedFractionalPoint', null, global);
goog.exportSymbol('proto.PackedPickup', null, global);
goog.exportSymbol('proto.PackedPickupType', null, global);
goog.exportSymbol('proto.PackedPlayerModel', null, global);
goog.exportSymbol('proto.PackedPoint', null, global);
goog.exportSymbol('proto.PackedTeleport', null, global);
goog.exportSymbol('proto.PackedTilePosition', null, global);
goog.exportSymbol('proto.Platform', null, global);
goog.exportSymbol('proto.PlayRequest', null, global);
goog.exportSymbol('proto.PlayerDeparted', null, global);
goog.exportSymbol('proto.PlayerJoined', null, global);
goog.exportSymbol('proto.ServerStatsUpdate', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.InfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.InfoRequest.displayName = 'proto.InfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PlayRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PlayRequest.displayName = 'proto.PlayRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.InfoResponse.repeatedFields_, null);
};
goog.inherits(proto.InfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.InfoResponse.displayName = 'proto.InfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServerStatsUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ServerStatsUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ServerStatsUpdate.displayName = 'proto.ServerStatsUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayerDeparted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PlayerDeparted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PlayerDeparted.displayName = 'proto.PlayerDeparted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlayerJoined = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PlayerJoined, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PlayerJoined.displayName = 'proto.PlayerJoined';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LevelInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LevelInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.LevelInfo.displayName = 'proto.LevelInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PackedClientPlayerUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PackedClientPlayerUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PackedClientPlayerUpdate.displayName = 'proto.PackedClientPlayerUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PackedClientSpawnedBulletUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PackedClientSpawnedBulletUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PackedClientSpawnedBulletUpdate.displayName = 'proto.PackedClientSpawnedBulletUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PackedClientSpawnedBombUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PackedClientSpawnedBombUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PackedClientSpawnedBombUpdate.displayName = 'proto.PackedClientSpawnedBombUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameCreated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GameCreated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GameCreated.displayName = 'proto.GameCreated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PackedPickup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PackedPickup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PackedPickup.displayName = 'proto.PackedPickup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PackedClientPickedUpUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PackedClientPickedUpUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PackedClientPickedUpUpdate.displayName = 'proto.PackedClientPickedUpUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PackedArena = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PackedArena.repeatedFields_, null);
};
goog.inherits(proto.PackedArena, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PackedArena.displayName = 'proto.PackedArena';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PackedPlayerModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PackedPlayerModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PackedPlayerModel.displayName = 'proto.PackedPlayerModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PackedBulletModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PackedBulletModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PackedBulletModel.displayName = 'proto.PackedBulletModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PackedBombModel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PackedBombModel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PackedBombModel.displayName = 'proto.PackedBombModel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PackedTeleport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PackedTeleport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PackedTeleport.displayName = 'proto.PackedTeleport';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PackedTilePosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PackedTilePosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PackedTilePosition.displayName = 'proto.PackedTilePosition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PackedFractionalPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PackedFractionalPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PackedFractionalPoint.displayName = 'proto.PackedFractionalPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PackedPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PackedPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PackedPoint.displayName = 'proto.PackedPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DoubleTwoDecimals = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DoubleTwoDecimals, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DoubleTwoDecimals.displayName = 'proto.DoubleTwoDecimals';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DoubleFourDecimals = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DoubleFourDecimals, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DoubleFourDecimals.displayName = 'proto.DoubleFourDecimals';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.InfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.InfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.InfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InfoRequest}
 */
proto.InfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InfoRequest;
  return proto.InfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InfoRequest}
 */
proto.InfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.InfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    levelname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    platform: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayRequest}
 */
proto.PlayRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayRequest;
  return proto.PlayRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayRequest}
 */
proto.PlayRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLevelname(value);
      break;
    case 2:
      var value = /** @type {!proto.Platform} */ (reader.readEnum());
      msg.setPlatform(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLevelname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlatform();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string levelName = 1;
 * @return {string}
 */
proto.PlayRequest.prototype.getLevelname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PlayRequest} returns this
 */
proto.PlayRequest.prototype.setLevelname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Platform platform = 2;
 * @return {!proto.Platform}
 */
proto.PlayRequest.prototype.getPlatform = function() {
  return /** @type {!proto.Platform} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Platform} value
 * @return {!proto.PlayRequest} returns this
 */
proto.PlayRequest.prototype.setPlatform = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.InfoResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.InfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.InfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.InfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    levelsList: jspb.Message.toObjectList(msg.getLevelsList(),
    proto.LevelInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InfoResponse}
 */
proto.InfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InfoResponse;
  return proto.InfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InfoResponse}
 */
proto.InfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.LevelInfo;
      reader.readMessage(value,proto.LevelInfo.deserializeBinaryFromReader);
      msg.addLevels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.InfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLevelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.LevelInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated LevelInfo levels = 1;
 * @return {!Array<!proto.LevelInfo>}
 */
proto.InfoResponse.prototype.getLevelsList = function() {
  return /** @type{!Array<!proto.LevelInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.LevelInfo, 1));
};


/**
 * @param {!Array<!proto.LevelInfo>} value
 * @return {!proto.InfoResponse} returns this
*/
proto.InfoResponse.prototype.setLevelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.LevelInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.LevelInfo}
 */
proto.InfoResponse.prototype.addLevels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.LevelInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.InfoResponse} returns this
 */
proto.InfoResponse.prototype.clearLevelsList = function() {
  return this.setLevelsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServerStatsUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.ServerStatsUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServerStatsUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerStatsUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalgames: jspb.Message.getFieldWithDefault(msg, 1, 0),
    totalplayers: jspb.Message.getFieldWithDefault(msg, 2, 0),
    runninglevelscountsMap: (f = msg.getRunninglevelscountsMap()) ? f.toObject(includeInstance, undefined) : [],
    waitingforlevelscountsMap: (f = msg.getWaitingforlevelscountsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServerStatsUpdate}
 */
proto.ServerStatsUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServerStatsUpdate;
  return proto.ServerStatsUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServerStatsUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServerStatsUpdate}
 */
proto.ServerStatsUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalgames(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalplayers(value);
      break;
    case 3:
      var value = msg.getRunninglevelscountsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint32, null, "", 0);
         });
      break;
    case 4:
      var value = msg.getWaitingforlevelscountsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint32, null, "", 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServerStatsUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServerStatsUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServerStatsUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerStatsUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalgames();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTotalplayers();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getRunninglevelscountsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint32);
  }
  f = message.getWaitingforlevelscountsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint32);
  }
};


/**
 * optional uint32 totalGames = 1;
 * @return {number}
 */
proto.ServerStatsUpdate.prototype.getTotalgames = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ServerStatsUpdate} returns this
 */
proto.ServerStatsUpdate.prototype.setTotalgames = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 totalPlayers = 2;
 * @return {number}
 */
proto.ServerStatsUpdate.prototype.getTotalplayers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ServerStatsUpdate} returns this
 */
proto.ServerStatsUpdate.prototype.setTotalplayers = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * map<string, uint32> runningLevelsCounts = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.ServerStatsUpdate.prototype.getRunninglevelscountsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ServerStatsUpdate} returns this
 */
proto.ServerStatsUpdate.prototype.clearRunninglevelscountsMap = function() {
  this.getRunninglevelscountsMap().clear();
  return this;};


/**
 * map<string, uint32> waitingForLevelsCounts = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.ServerStatsUpdate.prototype.getWaitingforlevelscountsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ServerStatsUpdate} returns this
 */
proto.ServerStatsUpdate.prototype.clearWaitingforlevelscountsMap = function() {
  this.getWaitingforlevelscountsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayerDeparted.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayerDeparted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayerDeparted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerDeparted.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayerDeparted}
 */
proto.PlayerDeparted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayerDeparted;
  return proto.PlayerDeparted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayerDeparted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayerDeparted}
 */
proto.PlayerDeparted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setClientid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayerDeparted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayerDeparted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayerDeparted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerDeparted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 clientID = 1;
 * @return {number}
 */
proto.PlayerDeparted.prototype.getClientid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PlayerDeparted} returns this
 */
proto.PlayerDeparted.prototype.setClientid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlayerJoined.prototype.toObject = function(opt_includeInstance) {
  return proto.PlayerJoined.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlayerJoined} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerJoined.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    playerindex: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlayerJoined}
 */
proto.PlayerJoined.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlayerJoined;
  return proto.PlayerJoined.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlayerJoined} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlayerJoined}
 */
proto.PlayerJoined.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setClientid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPlayerindex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlayerJoined.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PlayerJoined.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PlayerJoined} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PlayerJoined.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPlayerindex();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 clientID = 1;
 * @return {number}
 */
proto.PlayerJoined.prototype.getClientid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PlayerJoined} returns this
 */
proto.PlayerJoined.prototype.setClientid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 playerIndex = 2;
 * @return {number}
 */
proto.PlayerJoined.prototype.getPlayerindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PlayerJoined} returns this
 */
proto.PlayerJoined.prototype.setPlayerindex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LevelInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.LevelInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LevelInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LevelInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nplayers: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LevelInfo}
 */
proto.LevelInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LevelInfo;
  return proto.LevelInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LevelInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LevelInfo}
 */
proto.LevelInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNplayers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LevelInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LevelInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LevelInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LevelInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNplayers();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.LevelInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.LevelInfo} returns this
 */
proto.LevelInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 nplayers = 2;
 * @return {number}
 */
proto.LevelInfo.prototype.getNplayers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.LevelInfo} returns this
 */
proto.LevelInfo.prototype.setNplayers = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PackedClientPlayerUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.PackedClientPlayerUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PackedClientPlayerUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PackedClientPlayerUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    player: (f = msg.getPlayer()) && proto.PackedPlayerModel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PackedClientPlayerUpdate}
 */
proto.PackedClientPlayerUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PackedClientPlayerUpdate;
  return proto.PackedClientPlayerUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PackedClientPlayerUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PackedClientPlayerUpdate}
 */
proto.PackedClientPlayerUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PackedPlayerModel;
      reader.readMessage(value,proto.PackedPlayerModel.deserializeBinaryFromReader);
      msg.setPlayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PackedClientPlayerUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PackedClientPlayerUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PackedClientPlayerUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PackedClientPlayerUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlayer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PackedPlayerModel.serializeBinaryToWriter
    );
  }
};


/**
 * optional PackedPlayerModel player = 1;
 * @return {?proto.PackedPlayerModel}
 */
proto.PackedClientPlayerUpdate.prototype.getPlayer = function() {
  return /** @type{?proto.PackedPlayerModel} */ (
    jspb.Message.getWrapperField(this, proto.PackedPlayerModel, 1));
};


/**
 * @param {?proto.PackedPlayerModel|undefined} value
 * @return {!proto.PackedClientPlayerUpdate} returns this
*/
proto.PackedClientPlayerUpdate.prototype.setPlayer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PackedClientPlayerUpdate} returns this
 */
proto.PackedClientPlayerUpdate.prototype.clearPlayer = function() {
  return this.setPlayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PackedClientPlayerUpdate.prototype.hasPlayer = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PackedClientSpawnedBulletUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.PackedClientSpawnedBulletUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PackedClientSpawnedBulletUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PackedClientSpawnedBulletUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    spawnedbullet: (f = msg.getSpawnedbullet()) && proto.PackedBulletModel.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PackedClientSpawnedBulletUpdate}
 */
proto.PackedClientSpawnedBulletUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PackedClientSpawnedBulletUpdate;
  return proto.PackedClientSpawnedBulletUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PackedClientSpawnedBulletUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PackedClientSpawnedBulletUpdate}
 */
proto.PackedClientSpawnedBulletUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PackedBulletModel;
      reader.readMessage(value,proto.PackedBulletModel.deserializeBinaryFromReader);
      msg.setSpawnedbullet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PackedClientSpawnedBulletUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PackedClientSpawnedBulletUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PackedClientSpawnedBulletUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PackedClientSpawnedBulletUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpawnedbullet();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PackedBulletModel.serializeBinaryToWriter
    );
  }
};


/**
 * optional PackedBulletModel spawnedBullet = 1;
 * @return {?proto.PackedBulletModel}
 */
proto.PackedClientSpawnedBulletUpdate.prototype.getSpawnedbullet = function() {
  return /** @type{?proto.PackedBulletModel} */ (
    jspb.Message.getWrapperField(this, proto.PackedBulletModel, 1));
};


/**
 * @param {?proto.PackedBulletModel|undefined} value
 * @return {!proto.PackedClientSpawnedBulletUpdate} returns this
*/
proto.PackedClientSpawnedBulletUpdate.prototype.setSpawnedbullet = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PackedClientSpawnedBulletUpdate} returns this
 */
proto.PackedClientSpawnedBulletUpdate.prototype.clearSpawnedbullet = function() {
  return this.setSpawnedbullet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PackedClientSpawnedBulletUpdate.prototype.hasSpawnedbullet = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PackedClientSpawnedBombUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.PackedClientSpawnedBombUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PackedClientSpawnedBombUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PackedClientSpawnedBombUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    spawnposition: (f = msg.getSpawnposition()) && proto.PackedTilePosition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PackedClientSpawnedBombUpdate}
 */
proto.PackedClientSpawnedBombUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PackedClientSpawnedBombUpdate;
  return proto.PackedClientSpawnedBombUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PackedClientSpawnedBombUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PackedClientSpawnedBombUpdate}
 */
proto.PackedClientSpawnedBombUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PackedTilePosition;
      reader.readMessage(value,proto.PackedTilePosition.deserializeBinaryFromReader);
      msg.setSpawnposition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PackedClientSpawnedBombUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PackedClientSpawnedBombUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PackedClientSpawnedBombUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PackedClientSpawnedBombUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpawnposition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PackedTilePosition.serializeBinaryToWriter
    );
  }
};


/**
 * optional PackedTilePosition spawnPosition = 1;
 * @return {?proto.PackedTilePosition}
 */
proto.PackedClientSpawnedBombUpdate.prototype.getSpawnposition = function() {
  return /** @type{?proto.PackedTilePosition} */ (
    jspb.Message.getWrapperField(this, proto.PackedTilePosition, 1));
};


/**
 * @param {?proto.PackedTilePosition|undefined} value
 * @return {!proto.PackedClientSpawnedBombUpdate} returns this
*/
proto.PackedClientSpawnedBombUpdate.prototype.setSpawnposition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PackedClientSpawnedBombUpdate} returns this
 */
proto.PackedClientSpawnedBombUpdate.prototype.clearSpawnposition = function() {
  return this.setSpawnposition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PackedClientSpawnedBombUpdate.prototype.hasSpawnposition = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameCreated.prototype.toObject = function(opt_includeInstance) {
  return proto.GameCreated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameCreated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameCreated.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    clientid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    playerindex: jspb.Message.getFieldWithDefault(msg, 3, 0),
    arena: (f = msg.getArena()) && proto.PackedArena.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameCreated}
 */
proto.GameCreated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameCreated;
  return proto.GameCreated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameCreated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameCreated}
 */
proto.GameCreated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGameid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setClientid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPlayerindex(value);
      break;
    case 4:
      var value = new proto.PackedArena;
      reader.readMessage(value,proto.PackedArena.deserializeBinaryFromReader);
      msg.setArena(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameCreated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameCreated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameCreated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameCreated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getClientid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getPlayerindex();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getArena();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.PackedArena.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 gameID = 1;
 * @return {number}
 */
proto.GameCreated.prototype.getGameid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.GameCreated} returns this
 */
proto.GameCreated.prototype.setGameid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 clientID = 2;
 * @return {number}
 */
proto.GameCreated.prototype.getClientid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.GameCreated} returns this
 */
proto.GameCreated.prototype.setClientid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 playerIndex = 3;
 * @return {number}
 */
proto.GameCreated.prototype.getPlayerindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.GameCreated} returns this
 */
proto.GameCreated.prototype.setPlayerindex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional PackedArena arena = 4;
 * @return {?proto.PackedArena}
 */
proto.GameCreated.prototype.getArena = function() {
  return /** @type{?proto.PackedArena} */ (
    jspb.Message.getWrapperField(this, proto.PackedArena, 4));
};


/**
 * @param {?proto.PackedArena|undefined} value
 * @return {!proto.GameCreated} returns this
*/
proto.GameCreated.prototype.setArena = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GameCreated} returns this
 */
proto.GameCreated.prototype.clearArena = function() {
  return this.setArena(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GameCreated.prototype.hasArena = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PackedPickup.prototype.toObject = function(opt_includeInstance) {
  return proto.PackedPickup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PackedPickup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PackedPickup.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tileposition: (f = msg.getTileposition()) && proto.PackedTilePosition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PackedPickup}
 */
proto.PackedPickup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PackedPickup;
  return proto.PackedPickup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PackedPickup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PackedPickup}
 */
proto.PackedPickup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.PackedPickupType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.PackedTilePosition;
      reader.readMessage(value,proto.PackedTilePosition.deserializeBinaryFromReader);
      msg.setTileposition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PackedPickup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PackedPickup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PackedPickup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PackedPickup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTileposition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.PackedTilePosition.serializeBinaryToWriter
    );
  }
};


/**
 * optional PackedPickupType type = 1;
 * @return {!proto.PackedPickupType}
 */
proto.PackedPickup.prototype.getType = function() {
  return /** @type {!proto.PackedPickupType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.PackedPickupType} value
 * @return {!proto.PackedPickup} returns this
 */
proto.PackedPickup.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional PackedTilePosition tilePosition = 2;
 * @return {?proto.PackedTilePosition}
 */
proto.PackedPickup.prototype.getTileposition = function() {
  return /** @type{?proto.PackedTilePosition} */ (
    jspb.Message.getWrapperField(this, proto.PackedTilePosition, 2));
};


/**
 * @param {?proto.PackedTilePosition|undefined} value
 * @return {!proto.PackedPickup} returns this
*/
proto.PackedPickup.prototype.setTileposition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PackedPickup} returns this
 */
proto.PackedPickup.prototype.clearTileposition = function() {
  return this.setTileposition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PackedPickup.prototype.hasTileposition = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PackedClientPickedUpUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.PackedClientPickedUpUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PackedClientPickedUpUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PackedClientPickedUpUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    colrow: (f = msg.getColrow()) && proto.PackedPoint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PackedClientPickedUpUpdate}
 */
proto.PackedClientPickedUpUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PackedClientPickedUpUpdate;
  return proto.PackedClientPickedUpUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PackedClientPickedUpUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PackedClientPickedUpUpdate}
 */
proto.PackedClientPickedUpUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PackedPoint;
      reader.readMessage(value,proto.PackedPoint.deserializeBinaryFromReader);
      msg.setColrow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PackedClientPickedUpUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PackedClientPickedUpUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PackedClientPickedUpUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PackedClientPickedUpUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColrow();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PackedPoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional PackedPoint colRow = 1;
 * @return {?proto.PackedPoint}
 */
proto.PackedClientPickedUpUpdate.prototype.getColrow = function() {
  return /** @type{?proto.PackedPoint} */ (
    jspb.Message.getWrapperField(this, proto.PackedPoint, 1));
};


/**
 * @param {?proto.PackedPoint|undefined} value
 * @return {!proto.PackedClientPickedUpUpdate} returns this
*/
proto.PackedClientPickedUpUpdate.prototype.setColrow = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PackedClientPickedUpUpdate} returns this
 */
proto.PackedClientPickedUpUpdate.prototype.clearColrow = function() {
  return this.setColrow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PackedClientPickedUpUpdate.prototype.hasColrow = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PackedArena.repeatedFields_ = [1,2,3,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PackedArena.prototype.toObject = function(opt_includeInstance) {
  return proto.PackedArena.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PackedArena} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PackedArena.toObject = function(includeInstance, msg) {
  var f, obj = {
    floortilesList: jspb.Message.toObjectList(msg.getFloortilesList(),
    proto.PackedTilePosition.toObject, includeInstance),
    wallsList: jspb.Message.toObjectList(msg.getWallsList(),
    proto.PackedTilePosition.toObject, includeInstance),
    playerpositionsList: jspb.Message.toObjectList(msg.getPlayerpositionsList(),
    proto.PackedTilePosition.toObject, includeInstance),
    nrows: jspb.Message.getFieldWithDefault(msg, 4, 0),
    ncols: jspb.Message.getFieldWithDefault(msg, 5, 0),
    tilesize: jspb.Message.getFieldWithDefault(msg, 6, 0),
    pickupsList: jspb.Message.toObjectList(msg.getPickupsList(),
    proto.PackedPickup.toObject, includeInstance),
    teleportsList: jspb.Message.toObjectList(msg.getTeleportsList(),
    proto.PackedTeleport.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PackedArena}
 */
proto.PackedArena.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PackedArena;
  return proto.PackedArena.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PackedArena} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PackedArena}
 */
proto.PackedArena.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PackedTilePosition;
      reader.readMessage(value,proto.PackedTilePosition.deserializeBinaryFromReader);
      msg.addFloortiles(value);
      break;
    case 2:
      var value = new proto.PackedTilePosition;
      reader.readMessage(value,proto.PackedTilePosition.deserializeBinaryFromReader);
      msg.addWalls(value);
      break;
    case 3:
      var value = new proto.PackedTilePosition;
      reader.readMessage(value,proto.PackedTilePosition.deserializeBinaryFromReader);
      msg.addPlayerpositions(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNrows(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNcols(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTilesize(value);
      break;
    case 7:
      var value = new proto.PackedPickup;
      reader.readMessage(value,proto.PackedPickup.deserializeBinaryFromReader);
      msg.addPickups(value);
      break;
    case 8:
      var value = new proto.PackedTeleport;
      reader.readMessage(value,proto.PackedTeleport.deserializeBinaryFromReader);
      msg.addTeleports(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PackedArena.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PackedArena.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PackedArena} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PackedArena.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFloortilesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.PackedTilePosition.serializeBinaryToWriter
    );
  }
  f = message.getWallsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.PackedTilePosition.serializeBinaryToWriter
    );
  }
  f = message.getPlayerpositionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.PackedTilePosition.serializeBinaryToWriter
    );
  }
  f = message.getNrows();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getNcols();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getTilesize();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getPickupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.PackedPickup.serializeBinaryToWriter
    );
  }
  f = message.getTeleportsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.PackedTeleport.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PackedTilePosition floorTiles = 1;
 * @return {!Array<!proto.PackedTilePosition>}
 */
proto.PackedArena.prototype.getFloortilesList = function() {
  return /** @type{!Array<!proto.PackedTilePosition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PackedTilePosition, 1));
};


/**
 * @param {!Array<!proto.PackedTilePosition>} value
 * @return {!proto.PackedArena} returns this
*/
proto.PackedArena.prototype.setFloortilesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PackedTilePosition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PackedTilePosition}
 */
proto.PackedArena.prototype.addFloortiles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PackedTilePosition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PackedArena} returns this
 */
proto.PackedArena.prototype.clearFloortilesList = function() {
  return this.setFloortilesList([]);
};


/**
 * repeated PackedTilePosition walls = 2;
 * @return {!Array<!proto.PackedTilePosition>}
 */
proto.PackedArena.prototype.getWallsList = function() {
  return /** @type{!Array<!proto.PackedTilePosition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PackedTilePosition, 2));
};


/**
 * @param {!Array<!proto.PackedTilePosition>} value
 * @return {!proto.PackedArena} returns this
*/
proto.PackedArena.prototype.setWallsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.PackedTilePosition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PackedTilePosition}
 */
proto.PackedArena.prototype.addWalls = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.PackedTilePosition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PackedArena} returns this
 */
proto.PackedArena.prototype.clearWallsList = function() {
  return this.setWallsList([]);
};


/**
 * repeated PackedTilePosition playerPositions = 3;
 * @return {!Array<!proto.PackedTilePosition>}
 */
proto.PackedArena.prototype.getPlayerpositionsList = function() {
  return /** @type{!Array<!proto.PackedTilePosition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PackedTilePosition, 3));
};


/**
 * @param {!Array<!proto.PackedTilePosition>} value
 * @return {!proto.PackedArena} returns this
*/
proto.PackedArena.prototype.setPlayerpositionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.PackedTilePosition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PackedTilePosition}
 */
proto.PackedArena.prototype.addPlayerpositions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.PackedTilePosition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PackedArena} returns this
 */
proto.PackedArena.prototype.clearPlayerpositionsList = function() {
  return this.setPlayerpositionsList([]);
};


/**
 * optional uint32 nrows = 4;
 * @return {number}
 */
proto.PackedArena.prototype.getNrows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.PackedArena} returns this
 */
proto.PackedArena.prototype.setNrows = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 ncols = 5;
 * @return {number}
 */
proto.PackedArena.prototype.getNcols = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.PackedArena} returns this
 */
proto.PackedArena.prototype.setNcols = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 tileSize = 6;
 * @return {number}
 */
proto.PackedArena.prototype.getTilesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.PackedArena} returns this
 */
proto.PackedArena.prototype.setTilesize = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated PackedPickup pickups = 7;
 * @return {!Array<!proto.PackedPickup>}
 */
proto.PackedArena.prototype.getPickupsList = function() {
  return /** @type{!Array<!proto.PackedPickup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PackedPickup, 7));
};


/**
 * @param {!Array<!proto.PackedPickup>} value
 * @return {!proto.PackedArena} returns this
*/
proto.PackedArena.prototype.setPickupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.PackedPickup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PackedPickup}
 */
proto.PackedArena.prototype.addPickups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.PackedPickup, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PackedArena} returns this
 */
proto.PackedArena.prototype.clearPickupsList = function() {
  return this.setPickupsList([]);
};


/**
 * repeated PackedTeleport teleports = 8;
 * @return {!Array<!proto.PackedTeleport>}
 */
proto.PackedArena.prototype.getTeleportsList = function() {
  return /** @type{!Array<!proto.PackedTeleport>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PackedTeleport, 8));
};


/**
 * @param {!Array<!proto.PackedTeleport>} value
 * @return {!proto.PackedArena} returns this
*/
proto.PackedArena.prototype.setTeleportsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.PackedTeleport=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PackedTeleport}
 */
proto.PackedArena.prototype.addTeleports = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.PackedTeleport, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PackedArena} returns this
 */
proto.PackedArena.prototype.clearTeleportsList = function() {
  return this.setTeleportsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PackedPlayerModel.prototype.toObject = function(opt_includeInstance) {
  return proto.PackedPlayerModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PackedPlayerModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PackedPlayerModel.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tileposition: (f = msg.getTileposition()) && proto.PackedTilePosition.toObject(includeInstance, f),
    velocity: (f = msg.getVelocity()) && proto.PackedFractionalPoint.toObject(includeInstance, f),
    angle: (f = msg.getAngle()) && proto.DoubleFourDecimals.toObject(includeInstance, f),
    health: (f = msg.getHealth()) && proto.DoubleTwoDecimals.toObject(includeInstance, f),
    shieldremainingms: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PackedPlayerModel}
 */
proto.PackedPlayerModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PackedPlayerModel;
  return proto.PackedPlayerModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PackedPlayerModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PackedPlayerModel}
 */
proto.PackedPlayerModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.PackedTilePosition;
      reader.readMessage(value,proto.PackedTilePosition.deserializeBinaryFromReader);
      msg.setTileposition(value);
      break;
    case 3:
      var value = new proto.PackedFractionalPoint;
      reader.readMessage(value,proto.PackedFractionalPoint.deserializeBinaryFromReader);
      msg.setVelocity(value);
      break;
    case 4:
      var value = new proto.DoubleFourDecimals;
      reader.readMessage(value,proto.DoubleFourDecimals.deserializeBinaryFromReader);
      msg.setAngle(value);
      break;
    case 5:
      var value = new proto.DoubleTwoDecimals;
      reader.readMessage(value,proto.DoubleTwoDecimals.deserializeBinaryFromReader);
      msg.setHealth(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setShieldremainingms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PackedPlayerModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PackedPlayerModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PackedPlayerModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PackedPlayerModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTileposition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.PackedTilePosition.serializeBinaryToWriter
    );
  }
  f = message.getVelocity();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.PackedFractionalPoint.serializeBinaryToWriter
    );
  }
  f = message.getAngle();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.DoubleFourDecimals.serializeBinaryToWriter
    );
  }
  f = message.getHealth();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.DoubleTwoDecimals.serializeBinaryToWriter
    );
  }
  f = message.getShieldremainingms();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.PackedPlayerModel.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PackedPlayerModel} returns this
 */
proto.PackedPlayerModel.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional PackedTilePosition tilePosition = 2;
 * @return {?proto.PackedTilePosition}
 */
proto.PackedPlayerModel.prototype.getTileposition = function() {
  return /** @type{?proto.PackedTilePosition} */ (
    jspb.Message.getWrapperField(this, proto.PackedTilePosition, 2));
};


/**
 * @param {?proto.PackedTilePosition|undefined} value
 * @return {!proto.PackedPlayerModel} returns this
*/
proto.PackedPlayerModel.prototype.setTileposition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PackedPlayerModel} returns this
 */
proto.PackedPlayerModel.prototype.clearTileposition = function() {
  return this.setTileposition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PackedPlayerModel.prototype.hasTileposition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PackedFractionalPoint velocity = 3;
 * @return {?proto.PackedFractionalPoint}
 */
proto.PackedPlayerModel.prototype.getVelocity = function() {
  return /** @type{?proto.PackedFractionalPoint} */ (
    jspb.Message.getWrapperField(this, proto.PackedFractionalPoint, 3));
};


/**
 * @param {?proto.PackedFractionalPoint|undefined} value
 * @return {!proto.PackedPlayerModel} returns this
*/
proto.PackedPlayerModel.prototype.setVelocity = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PackedPlayerModel} returns this
 */
proto.PackedPlayerModel.prototype.clearVelocity = function() {
  return this.setVelocity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PackedPlayerModel.prototype.hasVelocity = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DoubleFourDecimals angle = 4;
 * @return {?proto.DoubleFourDecimals}
 */
proto.PackedPlayerModel.prototype.getAngle = function() {
  return /** @type{?proto.DoubleFourDecimals} */ (
    jspb.Message.getWrapperField(this, proto.DoubleFourDecimals, 4));
};


/**
 * @param {?proto.DoubleFourDecimals|undefined} value
 * @return {!proto.PackedPlayerModel} returns this
*/
proto.PackedPlayerModel.prototype.setAngle = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PackedPlayerModel} returns this
 */
proto.PackedPlayerModel.prototype.clearAngle = function() {
  return this.setAngle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PackedPlayerModel.prototype.hasAngle = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional DoubleTwoDecimals health = 5;
 * @return {?proto.DoubleTwoDecimals}
 */
proto.PackedPlayerModel.prototype.getHealth = function() {
  return /** @type{?proto.DoubleTwoDecimals} */ (
    jspb.Message.getWrapperField(this, proto.DoubleTwoDecimals, 5));
};


/**
 * @param {?proto.DoubleTwoDecimals|undefined} value
 * @return {!proto.PackedPlayerModel} returns this
*/
proto.PackedPlayerModel.prototype.setHealth = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PackedPlayerModel} returns this
 */
proto.PackedPlayerModel.prototype.clearHealth = function() {
  return this.setHealth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PackedPlayerModel.prototype.hasHealth = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 shieldRemainingMs = 6;
 * @return {number}
 */
proto.PackedPlayerModel.prototype.getShieldremainingms = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.PackedPlayerModel} returns this
 */
proto.PackedPlayerModel.prototype.setShieldremainingms = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PackedBulletModel.prototype.toObject = function(opt_includeInstance) {
  return proto.PackedBulletModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PackedBulletModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PackedBulletModel.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tileposition: (f = msg.getTileposition()) && proto.PackedTilePosition.toObject(includeInstance, f),
    velocity: (f = msg.getVelocity()) && proto.PackedFractionalPoint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PackedBulletModel}
 */
proto.PackedBulletModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PackedBulletModel;
  return proto.PackedBulletModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PackedBulletModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PackedBulletModel}
 */
proto.PackedBulletModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setClientid(value);
      break;
    case 2:
      var value = new proto.PackedTilePosition;
      reader.readMessage(value,proto.PackedTilePosition.deserializeBinaryFromReader);
      msg.setTileposition(value);
      break;
    case 3:
      var value = new proto.PackedFractionalPoint;
      reader.readMessage(value,proto.PackedFractionalPoint.deserializeBinaryFromReader);
      msg.setVelocity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PackedBulletModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PackedBulletModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PackedBulletModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PackedBulletModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTileposition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.PackedTilePosition.serializeBinaryToWriter
    );
  }
  f = message.getVelocity();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.PackedFractionalPoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 clientID = 1;
 * @return {number}
 */
proto.PackedBulletModel.prototype.getClientid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PackedBulletModel} returns this
 */
proto.PackedBulletModel.prototype.setClientid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional PackedTilePosition tilePosition = 2;
 * @return {?proto.PackedTilePosition}
 */
proto.PackedBulletModel.prototype.getTileposition = function() {
  return /** @type{?proto.PackedTilePosition} */ (
    jspb.Message.getWrapperField(this, proto.PackedTilePosition, 2));
};


/**
 * @param {?proto.PackedTilePosition|undefined} value
 * @return {!proto.PackedBulletModel} returns this
*/
proto.PackedBulletModel.prototype.setTileposition = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PackedBulletModel} returns this
 */
proto.PackedBulletModel.prototype.clearTileposition = function() {
  return this.setTileposition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PackedBulletModel.prototype.hasTileposition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PackedFractionalPoint velocity = 3;
 * @return {?proto.PackedFractionalPoint}
 */
proto.PackedBulletModel.prototype.getVelocity = function() {
  return /** @type{?proto.PackedFractionalPoint} */ (
    jspb.Message.getWrapperField(this, proto.PackedFractionalPoint, 3));
};


/**
 * @param {?proto.PackedFractionalPoint|undefined} value
 * @return {!proto.PackedBulletModel} returns this
*/
proto.PackedBulletModel.prototype.setVelocity = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PackedBulletModel} returns this
 */
proto.PackedBulletModel.prototype.clearVelocity = function() {
  return this.setVelocity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PackedBulletModel.prototype.hasVelocity = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PackedBombModel.prototype.toObject = function(opt_includeInstance) {
  return proto.PackedBombModel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PackedBombModel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PackedBombModel.toObject = function(includeInstance, msg) {
  var f, obj = {
    tileposition: (f = msg.getTileposition()) && proto.PackedTilePosition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PackedBombModel}
 */
proto.PackedBombModel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PackedBombModel;
  return proto.PackedBombModel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PackedBombModel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PackedBombModel}
 */
proto.PackedBombModel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PackedTilePosition;
      reader.readMessage(value,proto.PackedTilePosition.deserializeBinaryFromReader);
      msg.setTileposition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PackedBombModel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PackedBombModel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PackedBombModel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PackedBombModel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTileposition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PackedTilePosition.serializeBinaryToWriter
    );
  }
};


/**
 * optional PackedTilePosition tilePosition = 1;
 * @return {?proto.PackedTilePosition}
 */
proto.PackedBombModel.prototype.getTileposition = function() {
  return /** @type{?proto.PackedTilePosition} */ (
    jspb.Message.getWrapperField(this, proto.PackedTilePosition, 1));
};


/**
 * @param {?proto.PackedTilePosition|undefined} value
 * @return {!proto.PackedBombModel} returns this
*/
proto.PackedBombModel.prototype.setTileposition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PackedBombModel} returns this
 */
proto.PackedBombModel.prototype.clearTileposition = function() {
  return this.setTileposition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PackedBombModel.prototype.hasTileposition = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PackedTeleport.prototype.toObject = function(opt_includeInstance) {
  return proto.PackedTeleport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PackedTeleport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PackedTeleport.toObject = function(includeInstance, msg) {
  var f, obj = {
    porta: (f = msg.getPorta()) && proto.PackedPoint.toObject(includeInstance, f),
    portb: (f = msg.getPortb()) && proto.PackedPoint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PackedTeleport}
 */
proto.PackedTeleport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PackedTeleport;
  return proto.PackedTeleport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PackedTeleport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PackedTeleport}
 */
proto.PackedTeleport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PackedPoint;
      reader.readMessage(value,proto.PackedPoint.deserializeBinaryFromReader);
      msg.setPorta(value);
      break;
    case 2:
      var value = new proto.PackedPoint;
      reader.readMessage(value,proto.PackedPoint.deserializeBinaryFromReader);
      msg.setPortb(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PackedTeleport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PackedTeleport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PackedTeleport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PackedTeleport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPorta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PackedPoint.serializeBinaryToWriter
    );
  }
  f = message.getPortb();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.PackedPoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional PackedPoint portA = 1;
 * @return {?proto.PackedPoint}
 */
proto.PackedTeleport.prototype.getPorta = function() {
  return /** @type{?proto.PackedPoint} */ (
    jspb.Message.getWrapperField(this, proto.PackedPoint, 1));
};


/**
 * @param {?proto.PackedPoint|undefined} value
 * @return {!proto.PackedTeleport} returns this
*/
proto.PackedTeleport.prototype.setPorta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PackedTeleport} returns this
 */
proto.PackedTeleport.prototype.clearPorta = function() {
  return this.setPorta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PackedTeleport.prototype.hasPorta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PackedPoint portB = 2;
 * @return {?proto.PackedPoint}
 */
proto.PackedTeleport.prototype.getPortb = function() {
  return /** @type{?proto.PackedPoint} */ (
    jspb.Message.getWrapperField(this, proto.PackedPoint, 2));
};


/**
 * @param {?proto.PackedPoint|undefined} value
 * @return {!proto.PackedTeleport} returns this
*/
proto.PackedTeleport.prototype.setPortb = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PackedTeleport} returns this
 */
proto.PackedTeleport.prototype.clearPortb = function() {
  return this.setPortb(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PackedTeleport.prototype.hasPortb = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PackedTilePosition.prototype.toObject = function(opt_includeInstance) {
  return proto.PackedTilePosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PackedTilePosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PackedTilePosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    colrow: (f = msg.getColrow()) && proto.PackedPoint.toObject(includeInstance, f),
    relxy: (f = msg.getRelxy()) && proto.PackedFractionalPoint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PackedTilePosition}
 */
proto.PackedTilePosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PackedTilePosition;
  return proto.PackedTilePosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PackedTilePosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PackedTilePosition}
 */
proto.PackedTilePosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PackedPoint;
      reader.readMessage(value,proto.PackedPoint.deserializeBinaryFromReader);
      msg.setColrow(value);
      break;
    case 2:
      var value = new proto.PackedFractionalPoint;
      reader.readMessage(value,proto.PackedFractionalPoint.deserializeBinaryFromReader);
      msg.setRelxy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PackedTilePosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PackedTilePosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PackedTilePosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PackedTilePosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColrow();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PackedPoint.serializeBinaryToWriter
    );
  }
  f = message.getRelxy();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.PackedFractionalPoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional PackedPoint colRow = 1;
 * @return {?proto.PackedPoint}
 */
proto.PackedTilePosition.prototype.getColrow = function() {
  return /** @type{?proto.PackedPoint} */ (
    jspb.Message.getWrapperField(this, proto.PackedPoint, 1));
};


/**
 * @param {?proto.PackedPoint|undefined} value
 * @return {!proto.PackedTilePosition} returns this
*/
proto.PackedTilePosition.prototype.setColrow = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PackedTilePosition} returns this
 */
proto.PackedTilePosition.prototype.clearColrow = function() {
  return this.setColrow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PackedTilePosition.prototype.hasColrow = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PackedFractionalPoint relXY = 2;
 * @return {?proto.PackedFractionalPoint}
 */
proto.PackedTilePosition.prototype.getRelxy = function() {
  return /** @type{?proto.PackedFractionalPoint} */ (
    jspb.Message.getWrapperField(this, proto.PackedFractionalPoint, 2));
};


/**
 * @param {?proto.PackedFractionalPoint|undefined} value
 * @return {!proto.PackedTilePosition} returns this
*/
proto.PackedTilePosition.prototype.setRelxy = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PackedTilePosition} returns this
 */
proto.PackedTilePosition.prototype.clearRelxy = function() {
  return this.setRelxy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PackedTilePosition.prototype.hasRelxy = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PackedFractionalPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.PackedFractionalPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PackedFractionalPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PackedFractionalPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    xy: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PackedFractionalPoint}
 */
proto.PackedFractionalPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PackedFractionalPoint;
  return proto.PackedFractionalPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PackedFractionalPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PackedFractionalPoint}
 */
proto.PackedFractionalPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setXy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PackedFractionalPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PackedFractionalPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PackedFractionalPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PackedFractionalPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getXy();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 xy = 1;
 * @return {number}
 */
proto.PackedFractionalPoint.prototype.getXy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PackedFractionalPoint} returns this
 */
proto.PackedFractionalPoint.prototype.setXy = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PackedPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.PackedPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PackedPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PackedPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    xy: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PackedPoint}
 */
proto.PackedPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PackedPoint;
  return proto.PackedPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PackedPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PackedPoint}
 */
proto.PackedPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setXy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PackedPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PackedPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PackedPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PackedPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getXy();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 xy = 1;
 * @return {number}
 */
proto.PackedPoint.prototype.getXy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PackedPoint} returns this
 */
proto.PackedPoint.prototype.setXy = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DoubleTwoDecimals.prototype.toObject = function(opt_includeInstance) {
  return proto.DoubleTwoDecimals.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DoubleTwoDecimals} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DoubleTwoDecimals.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DoubleTwoDecimals}
 */
proto.DoubleTwoDecimals.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DoubleTwoDecimals;
  return proto.DoubleTwoDecimals.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DoubleTwoDecimals} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DoubleTwoDecimals}
 */
proto.DoubleTwoDecimals.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DoubleTwoDecimals.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DoubleTwoDecimals.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DoubleTwoDecimals} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DoubleTwoDecimals.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 value = 1;
 * @return {number}
 */
proto.DoubleTwoDecimals.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.DoubleTwoDecimals} returns this
 */
proto.DoubleTwoDecimals.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DoubleFourDecimals.prototype.toObject = function(opt_includeInstance) {
  return proto.DoubleFourDecimals.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DoubleFourDecimals} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DoubleFourDecimals.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DoubleFourDecimals}
 */
proto.DoubleFourDecimals.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DoubleFourDecimals;
  return proto.DoubleFourDecimals.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DoubleFourDecimals} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DoubleFourDecimals}
 */
proto.DoubleFourDecimals.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DoubleFourDecimals.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DoubleFourDecimals.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DoubleFourDecimals} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DoubleFourDecimals.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 value = 1;
 * @return {number}
 */
proto.DoubleFourDecimals.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.DoubleFourDecimals} returns this
 */
proto.DoubleFourDecimals.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.Platform = {
  MACOS: 0,
  ANDROID: 1,
  LINUX: 2,
  WINDOWS: 3,
  IOS: 4,
  FUCHSIA: 5,
  WEB: 6
};

/**
 * @enum {number}
 */
proto.PackedPickupType = {
  MEDKIT: 0,
  SHIELD: 1,
  BOMB: 2
};

goog.object.extend(exports, proto);
